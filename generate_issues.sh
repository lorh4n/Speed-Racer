#!/bin/bash

# ==============================================================================
# Script para gerar issues no GitHub a partir do roadmap do projeto Speed Racer.
#
# PR√â-REQUISITO:
# 1. Ter a CLI do GitHub instalada: https://cli.github.com/
#    - Em sistemas Debian/Ubuntu: `sudo apt install gh`
# 2. Estar autenticado:
#    - Rode `gh auth login` e siga as instru√ß√µes.
#
# COMO USAR:
# 1. D√™ permiss√£o de execu√ß√£o ao script: `chmod +x generate_issues.sh`
# 2. Execute o script: `./generate_issues.sh`
# ==============================================================================

set -e

echo "üöÄ Iniciando a gera√ß√£o de issues no GitHub para o Speed Racer Engine..."
echo "Certifique-se de que voc√™ est√° no reposit√≥rio correto e autenticado com a CLI 'gh'."
echo ""

# --- SEMANA 1: FUNDA√á√ÉO ARQUITETURAL ---

echo "Gerando issues para a Semana 1..."

# Issue 1.1: Resource Management System
gh issue create --title "[S1] Implement Resource Management System (ResourceManager & BufferManager)" --body "$(cat <<'EOF'
### üéØ Objetivo
Implementar um sistema centralizado para gerenciar o ciclo de vida de recursos Vulkan (buffers, mem√≥ria) e abstrair a cria√ß√£o de buffers, resolvendo o problema de gerenciamento manual de recursos.

### Tarefas (ResourceManager)
- [ ] Criar `ResourceManager.hpp/cpp`
- [ ] Implementar padr√£o Singleton thread-safe
- [ ] Criar estrutura `Resource` base (ID, tipo, handle)
- [ ] Implementar registry com `std::unordered_map<ResourceID, Resource>`
- [ ] Adicionar m√©todos `registerResource()` e `releaseResource()`
- [ ] Implementar destrutor autom√°tico (RAII) para limpeza
- [ ] Adicionar logging de lifecycle de recursos
- [ ] Criar testes unit√°rios b√°sicos

### Tarefas (BufferManager)
- [ ] Criar `BufferManager.hpp/cpp`
- [ ] Implementar estrutura `Buffer` (VkBuffer + VkDeviceMemory + size)
- [ ] Adicionar `createBuffer()` gen√©rico
- [ ] Implementar `findMemoryType()` helper
- [ ] Adicionar `allocateMemory()` com properties
- [ ] Criar `createStagingBuffer()` especializado
- [ ] Implementar `copyBuffer()` com command buffer
- [ ] Adicionar helpers para mapping (`mapMemory/unmapMemory`)
- [ ] Integrar com ResourceManager
- [ ] Documentar uso com exemplos

### M√©tricas de Sucesso
- [ ] `BufferManager` pode criar um staging buffer e copiar dados para um device buffer.
- [ ] `ResourceManager` rastreia todos os buffers criados.
- [ ] A limpeza autom√°tica de recursos funciona corretamente no final do programa.
- [ ] O c√≥digo existente (tri√¢ngulo) ainda compila e renderiza.
EOF
)"

# Issue 1.2: Pipeline Architecture
gh issue create --title "[S1] Implement Pipeline Architecture with PipelineBuilder" --body "$(cat <<'EOF'
### üéØ Objetivo
Substituir o `PipelineManager` hardcoded por um `PipelineBuilder` flex√≠vel usando o Builder Pattern para facilitar a cria√ß√£o de m√∫ltiplos pipelines gr√°ficos.

### Tarefas
- [ ] Criar `PipelineBuilder.hpp/cpp`
- [ ] Implementar construtor com `VkDevice`
- [ ] Adicionar m√©todos fluentes (retornam `*this`) para configurar:
  - [ ] Shaders (`addShader`)
  - [ ] Vertex Input (`setVertexInput`)
  - [ ] Topologia (`setTopology`)
  - [ ] Viewport e Scissor (`setViewport`)
  - [ ] Rasterizer (`setRasterizer`)
  - [ ] Multisampling (`setMultisampling`)
  - [ ] Depth/Stencil (`setDepthStencil`)
  - [ ] Blending (`setBlending`)
  - [ ] Dynamic States (`setDynamicStates`)
  - [ ] Render Pass (`setRenderPass`)
  - [ ] Descriptor Layouts (`addDescriptorLayout`)
- [ ] Implementar m√©todo `build()` que retorna uma struct `Pipeline` (contendo `VkPipeline` e `VkPipelineLayout`).
- [ ] Adicionar valida√ß√£o de estado para garantir que todas as configura√ß√µes necess√°rias foram fornecidas.
- [ ] (Opcional) Criar presets para configura√ß√µes comuns (e.g., `createBasicPipeline()`).
- [ ] Integrar com o `ResourceManager` para rastreamento do ciclo de vida do pipeline.

### M√©tricas de Sucesso
- [ ] O `PipelineBuilder` consegue criar um pipeline b√°sico funcional.
- [ ] A API fluente √© ergon√¥mica e funciona corretamente.
- [ ] A valida√ß√£o de estado lan√ßa exce√ß√µes para configura√ß√µes incompletas.
- [ ] √â trivialmente f√°cil criar uma varia√ß√£o do pipeline (e.g., wireframe).
EOF
)"

# Issue 1.3: Asset Management System
gh issue create --title "[S1] Implement Asset Management System" --body "$(cat <<'EOF'
### üéØ Objetivo
Criar um `AssetManager` para abstrair o acesso a arquivos de assets (shaders, texturas, modelos), eliminando caminhos hardcoded e centralizando o carregamento.

### Tarefas
- [ ] Criar `AssetManager.hpp/cpp`.
- [ ] Implementar como um Singleton.
- [ ] Adicionar m√©todos para configurar diret√≥rios base (`setShaderDirectory`, `setTextureDirectory`, etc.).
- [ ] Implementar m√©todos de resolu√ß√£o de paths (`getShaderPath`, etc.) que retornam o caminho completo de um asset.
- [ ] Criar um registro interno (cache) para assets j√° carregados (prepara√ß√£o para o futuro).
- [ ] Adicionar valida√ß√£o de exist√™ncia de arquivos ao tentar resolver um path.
- [ ] Implementar logging para o carregamento de assets.
- [ ] Integrar com o `ShaderManager` existente para carregar shaders usando o `AssetManager`.

### M√©tricas de Sucesso
- [ ] Paths de shaders s√£o resolvidos corretamente pelo `AssetManager`.
- [ ] N√£o existem mais caminhos de arquivo relativos (`../../`) ou absolutos hardcoded no c√≥digo da engine.
- [ ] O sistema est√° preparado para o cache de assets (mesmo que o cache em si n√£o seja totalmente implementado).
- [ ] O log de assets carregados √© claro e informativo.
EOF
)"

# Issue 1.4: Integra√ß√£o e Refatora√ß√£o
gh issue create --title "[S1] Integrate New Core Systems and Refactor VulkanManager" --body "$(cat <<'EOF'
### üéØ Objetivo
Integrar os novos sistemas (`ResourceManager`, `BufferManager`, `PipelineBuilder`, `AssetManager`) no `VulkanManager` e refatorar a classe para reduzir seu acoplamento e complexidade.

### Tarefas de Refatora√ß√£o
- [ ] Substituir a cria√ß√£o manual de pipeline no `VulkanManager` por uma chamada ao `PipelineBuilder`.
- [ ] Registrar todos os recursos Vulkan criados (buffers, pipelines, etc.) no `ResourceManager`.
- [ ] Usar o `AssetManager` para obter os paths de todos os shaders.
- [ ] Remover c√≥digo duplicado e simplificar m√©todos para terem menos de 50 linhas cada, se poss√≠vel.
- [ ] Adicionar coment√°rios de documenta√ß√£o (`Doxygen` ou similar) para as novas APIs p√∫blicas.

### Tarefas de Teste e Valida√ß√£o
- [ ] Verificar que o tri√¢ngulo original ainda renderiza perfeitamente ap√≥s a refatora√ß√£o.
- [ ] Testar o redimensionamento da janela.
- [ ] Verificar o cleanup de recursos sem memory leaks (usando as mensagens de log do `ResourceManager` ou Valgrind).
- [ ] Testar a cria√ß√£o de um segundo pipeline (e.g., wireframe) para garantir que o `PipelineBuilder` √© flex√≠vel.

### Tarefas de Documenta√ß√£o
- [ ] Documentar a API p√∫blica do `ResourceManager`.
- [ ] Documentar a API p√∫blica do `BufferManager`.
- [ ] Documentar a API p√∫blica do `PipelineBuilder`.
- [ ] Documentar a API p√∫blica do `AssetManager`.
- [ ] Atualizar o `README.md` para refletir a nova arquitetura.
EOF
)"

echo "Issues da Semana 1 geradas."
echo ""
echo "Gerando issues para a Semana 2..."

# --- SEMANA 2: REAL GEOMETRY ---

# Issue 2.1: Vertex Buffer
gh issue create --title "[S2] Implement Vertex Buffers" --body "$(cat <<'EOF'
### üéØ Objetivo
Substituir os v√©rtices hardcoded no shader por um vertex buffer real, alimentado pela CPU e alocado na mem√≥ria da GPU.

### Tarefas
- [ ] Criar a struct `Vertex` em `include/core/Vertex.hpp` (com `pos`, `color`, `uv`).
- [ ] Na struct `Vertex`, implementar os m√©todos est√°ticos `getBindingDescription()` e `getAttributeDescriptions()`.
- [ ] No c√≥digo principal, criar um `std::vector<Vertex>` com os dados de um quadrado ou cubo.
- [ ] Usar o `BufferManager` para criar um vertex buffer na mem√≥ria do dispositivo (`VK_BUFFER_USAGE_VERTEX_BUFFER_BIT`).
- [ ] Implementar o upload dos dados do vetor para o buffer da GPU usando um staging buffer.
- [ ] Atualizar o `PipelineBuilder` para usar as descri√ß√µes de binding e atributo da struct `Vertex`.
- [ ] Modificar o vertex shader para receber os atributos de v√©rtice (`layout(location = ...)`).
- [ ] Atualizar o comando de desenho no render loop para bindar o vertex buffer (`vkCmdBindVertexBuffers`).
- [ ] Testar a renderiza√ß√£o do novo objeto.

### Arquivos a Criar/Modificar
- `include/core/Vertex.hpp`
- `src/core/Vertex.cpp`
- `assets/shaders/core/basic_vertex_input.vert` (novo shader)
- `src/core/VulkanManager.cpp` (ou onde a l√≥gica de renderiza√ß√£o estiver)
EOF
)"

# Issue 2.2: Index Buffer
gh issue create --title "[S2] Implement Index Buffers" --body "$(cat <<'EOF'
### üéØ Objetivo
Otimizar a renderiza√ß√£o de geometria usando um index buffer para reutilizar v√©rtices.

### Tarefas
- [ ] Criar um `std::vector<uint32_t>` com os √≠ndices para desenhar um objeto (e.g., um quadrado com dois tri√¢ngulos usa 6 √≠ndices para 4 v√©rtices).
- [ ] Implementar a fun√ß√£o `createIndexBuffer()` no `BufferManager`.
- [ ] Fazer o upload dos dados de √≠ndices para a GPU usando um staging buffer.
- [ ] Atualizar o command buffer para bindar o index buffer (`vkCmdBindIndexBuffer`).
- [ ] Mudar a chamada de desenho de `vkCmdDraw()` para `vkCmdDrawIndexed()`.
- [ ] Testar com um cubo, que usa 36 √≠ndices para 8 v√©rtices, para validar a economia.
EOF
)"

# Issue 2.3: Advanced Geometry
gh issue create --title "[S2] Implement Mesh Class and Procedural Geometry" --body "$(cat <<'EOF'
### üéØ Objetivo
Abstrair a geometria em uma classe `Mesh` e criar fun√ß√µes para gerar primitivas 3D de forma procedural.

### Tarefas
- [ ] Criar uma classe `Mesh` que encapsula um vertex buffer e um index buffer (e suas contagens).
- [ ] Implementar fun√ß√µes ou classes de geometria procedural que retornam um objeto `Mesh`:
  - [ ] `createCube()`
  - [ ] `createSphere()`
  - [ ] `createPlane()`
- [ ] Modificar a l√≥gica de renderiza√ß√£o para aceitar e desenhar um objeto `Mesh`.
- [ ] Adicionar m√∫ltiplos objetos `Mesh` √† cena para serem renderizados.
- [ ] (Opcional) Otimizar o processo de upload, talvez usando um "batch" para m√∫ltiplos staging buffers.
- [ ] Fazer um profiling de performance b√°sico.
- [ ] Documentar a classe `Mesh` e as fun√ß√µes de geometria.
EOF
)"

echo "Issues da Semana 2 geradas."
echo ""
echo "‚úÖ Gera√ß√£o de issues conclu√≠da!"
echo "Para criar as issues no seu reposit√≥rio GitHub, siga estes passos no seu terminal:"
echo "1. D√™ permiss√£o de execu√ß√£o ao script: chmod +x generate_issues.sh"
echo "2. Execute o script: ./generate_issues.sh"
